int main(int argc, char *argv[]):
Точка входа программы.
argc: Количество аргументов командной строки, переданных программе (включая имя программы).
argv: Массив строк с аргументами командной строки. Например, если программа вызывается как ./ircserv 6667 mypassword, то:
argv[0] будет "./ircserv".
argv[1] будет "6667".
argv[2] будет "mypassword".

Проверка аргументов
if (argc != 3) {
    std::cerr << "Usage: ./ircserv <port> <password>" << std::endl;
    return 1;
}
if (argc != 3): Проверяет, переданы ли два аргумента (port и password), кроме имени программы.
Если аргументы отсутствуют или их больше/меньше двух:
std::cerr: Выводит сообщение об ошибке в поток ошибок .
return 1: Завершает программу с кодом возврата 1

Извлечение аргументов
int port = std::atoi(argv[1]);
std::string password = argv[2];
int port = std::atoi(argv[1]);:
Преобразует строку из аргумента argv[1] (номер порта) в целое число с помощью std::atoi.
std::string password = argv[2];:
Сохраняет второй аргумент argv[2] (пароль) как строку.

Создание и запуск сервера
try {
    Server server(port, password);
    server.run();
}
try: Начинает блок обработки исключений, чтобы перехватить ошибки.
Server server(port, password);:
Создает объект класса Server, передавая номер порта и пароль в его конструктор.
Этот объект отвечает за настройку сокета, запуск сервера и обработку клиентов.
server.run();:
Запускает метод run() объекта Server. Этот метод обычно:
Слушает входящие подключения.
Управляет клиентами.
Обрабатывает команды и сообщения.

Обработка ошибок
catch (const std::exception &e) {
    std::cerr << "Error: " << e.what() << std::endl;
    return 1;
}
catch (const std::exception &e):
Перехватывает исключения типа std::exception.
std::cerr << "Error: " << e.what() << std::endl;:
Выводит сообщение об ошибке, которое возвращает метод what() исключения e.

Резюме работы кода
Программа ожидает два аргумента командной строки: номер порта и пароль.
Если аргументы переданы некорректно, она выводит сообщение об ошибке и завершает работу.
При корректных аргументах создается объект Server, и запускается его метод run().
Если во время работы возникает ошибка (например, ошибка сокета), программа перехватывает исключение, выводит его и завершает выполнение с ошибкой.